// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2024 14:20:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab1-fpAdd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab1-fpAdd_vlg_sample_tst(
	ExponentA,
	ExponentB,
	GClock,
	GReset,
	MantissaA,
	MantissaB,
	SignA,
	SignB,
	sampler_tx
);
input [6:0] ExponentA;
input [6:0] ExponentB;
input  GClock;
input  GReset;
input [7:0] MantissaA;
input [7:0] MantissaB;
input  SignA;
input  SignB;
output sampler_tx;

reg sample;
time current_time;
always @(ExponentA or ExponentB or GClock or GReset or MantissaA or MantissaB or SignA or SignB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab1-fpAdd_vlg_check_tst (
	E_out,
	M_out,
	S_out,
	V,
	sampler_rx
);
input [6:0] E_out;
input [7:0] M_out;
input  S_out;
input  V;
input sampler_rx;

reg [6:0] E_out_expected;
reg [7:0] M_out_expected;
reg  S_out_expected;
reg  V_expected;

reg [6:0] E_out_prev;
reg [7:0] M_out_prev;
reg  S_out_prev;
reg  V_prev;

reg [6:0] E_out_expected_prev;
reg [7:0] M_out_expected_prev;
reg  S_out_expected_prev;
reg  V_expected_prev;

reg [6:0] last_E_out_exp;
reg [7:0] last_M_out_exp;
reg  last_S_out_exp;
reg  last_V_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	E_out_prev = E_out;
	M_out_prev = M_out;
	S_out_prev = S_out;
	V_prev = V;
end

// update expected /o prevs

always @(trigger)
begin
	E_out_expected_prev = E_out_expected;
	M_out_expected_prev = M_out_expected;
	S_out_expected_prev = S_out_expected;
	V_expected_prev = V_expected;
end


// expected E_out[ 6 ]
initial
begin
	E_out_expected[6] = 1'bX;
end 
// expected E_out[ 5 ]
initial
begin
	E_out_expected[5] = 1'bX;
end 
// expected E_out[ 4 ]
initial
begin
	E_out_expected[4] = 1'bX;
end 
// expected E_out[ 3 ]
initial
begin
	E_out_expected[3] = 1'bX;
end 
// expected E_out[ 2 ]
initial
begin
	E_out_expected[2] = 1'bX;
end 
// expected E_out[ 1 ]
initial
begin
	E_out_expected[1] = 1'bX;
end 
// expected E_out[ 0 ]
initial
begin
	E_out_expected[0] = 1'bX;
end 
// expected M_out[ 7 ]
initial
begin
	M_out_expected[7] = 1'bX;
end 
// expected M_out[ 6 ]
initial
begin
	M_out_expected[6] = 1'bX;
end 
// expected M_out[ 5 ]
initial
begin
	M_out_expected[5] = 1'bX;
end 
// expected M_out[ 4 ]
initial
begin
	M_out_expected[4] = 1'bX;
end 
// expected M_out[ 3 ]
initial
begin
	M_out_expected[3] = 1'bX;
end 
// expected M_out[ 2 ]
initial
begin
	M_out_expected[2] = 1'bX;
end 
// expected M_out[ 1 ]
initial
begin
	M_out_expected[1] = 1'bX;
end 
// expected M_out[ 0 ]
initial
begin
	M_out_expected[0] = 1'bX;
end 

// expected S_out
initial
begin
	S_out_expected = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 
// generate trigger
always @(E_out_expected or E_out or M_out_expected or M_out or S_out_expected or S_out or V_expected or V)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected E_out = %b | expected M_out = %b | expected S_out = %b | expected V = %b | ",E_out_expected_prev,M_out_expected_prev,S_out_expected_prev,V_expected_prev);
	$display("| real E_out = %b | real M_out = %b | real S_out = %b | real V = %b | ",E_out_prev,M_out_prev,S_out_prev,V_prev);
`endif
	if (
		( E_out_expected_prev[0] !== 1'bx ) && ( E_out_prev[0] !== E_out_expected_prev[0] )
		&& ((E_out_expected_prev[0] !== last_E_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[0] = E_out_expected_prev[0];
	end
	if (
		( E_out_expected_prev[1] !== 1'bx ) && ( E_out_prev[1] !== E_out_expected_prev[1] )
		&& ((E_out_expected_prev[1] !== last_E_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[1] = E_out_expected_prev[1];
	end
	if (
		( E_out_expected_prev[2] !== 1'bx ) && ( E_out_prev[2] !== E_out_expected_prev[2] )
		&& ((E_out_expected_prev[2] !== last_E_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[2] = E_out_expected_prev[2];
	end
	if (
		( E_out_expected_prev[3] !== 1'bx ) && ( E_out_prev[3] !== E_out_expected_prev[3] )
		&& ((E_out_expected_prev[3] !== last_E_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[3] = E_out_expected_prev[3];
	end
	if (
		( E_out_expected_prev[4] !== 1'bx ) && ( E_out_prev[4] !== E_out_expected_prev[4] )
		&& ((E_out_expected_prev[4] !== last_E_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[4] = E_out_expected_prev[4];
	end
	if (
		( E_out_expected_prev[5] !== 1'bx ) && ( E_out_prev[5] !== E_out_expected_prev[5] )
		&& ((E_out_expected_prev[5] !== last_E_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[5] = E_out_expected_prev[5];
	end
	if (
		( E_out_expected_prev[6] !== 1'bx ) && ( E_out_prev[6] !== E_out_expected_prev[6] )
		&& ((E_out_expected_prev[6] !== last_E_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_out_expected_prev);
		$display ("     Real value = %b", E_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_E_out_exp[6] = E_out_expected_prev[6];
	end
	if (
		( M_out_expected_prev[0] !== 1'bx ) && ( M_out_prev[0] !== M_out_expected_prev[0] )
		&& ((M_out_expected_prev[0] !== last_M_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[0] = M_out_expected_prev[0];
	end
	if (
		( M_out_expected_prev[1] !== 1'bx ) && ( M_out_prev[1] !== M_out_expected_prev[1] )
		&& ((M_out_expected_prev[1] !== last_M_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[1] = M_out_expected_prev[1];
	end
	if (
		( M_out_expected_prev[2] !== 1'bx ) && ( M_out_prev[2] !== M_out_expected_prev[2] )
		&& ((M_out_expected_prev[2] !== last_M_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[2] = M_out_expected_prev[2];
	end
	if (
		( M_out_expected_prev[3] !== 1'bx ) && ( M_out_prev[3] !== M_out_expected_prev[3] )
		&& ((M_out_expected_prev[3] !== last_M_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[3] = M_out_expected_prev[3];
	end
	if (
		( M_out_expected_prev[4] !== 1'bx ) && ( M_out_prev[4] !== M_out_expected_prev[4] )
		&& ((M_out_expected_prev[4] !== last_M_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[4] = M_out_expected_prev[4];
	end
	if (
		( M_out_expected_prev[5] !== 1'bx ) && ( M_out_prev[5] !== M_out_expected_prev[5] )
		&& ((M_out_expected_prev[5] !== last_M_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[5] = M_out_expected_prev[5];
	end
	if (
		( M_out_expected_prev[6] !== 1'bx ) && ( M_out_prev[6] !== M_out_expected_prev[6] )
		&& ((M_out_expected_prev[6] !== last_M_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[6] = M_out_expected_prev[6];
	end
	if (
		( M_out_expected_prev[7] !== 1'bx ) && ( M_out_prev[7] !== M_out_expected_prev[7] )
		&& ((M_out_expected_prev[7] !== last_M_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_out_expected_prev);
		$display ("     Real value = %b", M_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_out_exp[7] = M_out_expected_prev[7];
	end
	if (
		( S_out_expected_prev !== 1'bx ) && ( S_out_prev !== S_out_expected_prev )
		&& ((S_out_expected_prev !== last_S_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_out_expected_prev);
		$display ("     Real value = %b", S_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_out_exp = S_out_expected_prev;
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_V_exp = V_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab1-fpAdd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] ExponentA;
reg [6:0] ExponentB;
reg GClock;
reg GReset;
reg [7:0] MantissaA;
reg [7:0] MantissaB;
reg SignA;
reg SignB;
// wires                                               
wire [6:0] E_out;
wire [7:0] M_out;
wire S_out;
wire V;

wire sampler;                             

// assign statements (if any)                          
lab1-fpAdd i1 (
// port map - connection between master ports and signals/registers   
	.E_out(E_out),
	.ExponentA(ExponentA),
	.ExponentB(ExponentB),
	.GClock(GClock),
	.GReset(GReset),
	.M_out(M_out),
	.MantissaA(MantissaA),
	.MantissaB(MantissaB),
	.S_out(S_out),
	.SignA(SignA),
	.SignB(SignB),
	.V(V)
);
// ExponentA[ 6 ]
initial
begin
	ExponentA[6] = 1'b1;
end 
// ExponentA[ 5 ]
initial
begin
	ExponentA[5] = 1'b0;
end 
// ExponentA[ 4 ]
initial
begin
	ExponentA[4] = 1'b0;
end 
// ExponentA[ 3 ]
initial
begin
	ExponentA[3] = 1'b1;
end 
// ExponentA[ 2 ]
initial
begin
	ExponentA[2] = 1'b1;
end 
// ExponentA[ 1 ]
initial
begin
	ExponentA[1] = 1'b1;
end 
// ExponentA[ 0 ]
initial
begin
	ExponentA[0] = 1'b0;
end 
// ExponentB[ 6 ]
initial
begin
	ExponentB[6] = 1'b1;
end 
// ExponentB[ 5 ]
initial
begin
	ExponentB[5] = 1'b0;
end 
// ExponentB[ 4 ]
initial
begin
	ExponentB[4] = 1'b0;
end 
// ExponentB[ 3 ]
initial
begin
	ExponentB[3] = 1'b0;
end 
// ExponentB[ 2 ]
initial
begin
	ExponentB[2] = 1'b0;
end 
// ExponentB[ 1 ]
initial
begin
	ExponentB[1] = 1'b1;
end 
// ExponentB[ 0 ]
initial
begin
	ExponentB[0] = 1'b1;
end 

// GClock
always
begin
	GClock = 1'b0;
	GClock = #5000 1'b1;
	#5000;
end 

// GReset
initial
begin
	GReset = 1'b0;
end 
// MantissaA[ 7 ]
initial
begin
	MantissaA[7] = 1'b1;
end 
// MantissaA[ 6 ]
initial
begin
	MantissaA[6] = 1'b1;
end 
// MantissaA[ 5 ]
initial
begin
	MantissaA[5] = 1'b0;
end 
// MantissaA[ 4 ]
initial
begin
	MantissaA[4] = 1'b0;
end 
// MantissaA[ 3 ]
initial
begin
	MantissaA[3] = 1'b0;
end 
// MantissaA[ 2 ]
initial
begin
	MantissaA[2] = 1'b1;
end 
// MantissaA[ 1 ]
initial
begin
	MantissaA[1] = 1'b0;
end 
// MantissaA[ 0 ]
initial
begin
	MantissaA[0] = 1'b1;
end 
// MantissaB[ 7 ]
initial
begin
	MantissaB[7] = 1'b1;
end 
// MantissaB[ 6 ]
initial
begin
	MantissaB[6] = 1'b1;
end 
// MantissaB[ 5 ]
initial
begin
	MantissaB[5] = 1'b0;
end 
// MantissaB[ 4 ]
initial
begin
	MantissaB[4] = 1'b0;
end 
// MantissaB[ 3 ]
initial
begin
	MantissaB[3] = 1'b0;
end 
// MantissaB[ 2 ]
initial
begin
	MantissaB[2] = 1'b1;
end 
// MantissaB[ 1 ]
initial
begin
	MantissaB[1] = 1'b0;
end 
// MantissaB[ 0 ]
initial
begin
	MantissaB[0] = 1'b1;
end 

// SignA
initial
begin
	SignA = 1'b0;
end 

// SignB
initial
begin
	SignB = 1'b0;
end 

lab1-fpAdd_vlg_sample_tst tb_sample (
	.ExponentA(ExponentA),
	.ExponentB(ExponentB),
	.GClock(GClock),
	.GReset(GReset),
	.MantissaA(MantissaA),
	.MantissaB(MantissaB),
	.SignA(SignA),
	.SignB(SignB),
	.sampler_tx(sampler)
);

lab1-fpAdd_vlg_check_tst tb_out(
	.E_out(E_out),
	.M_out(M_out),
	.S_out(S_out),
	.V(V),
	.sampler_rx(sampler)
);
endmodule

